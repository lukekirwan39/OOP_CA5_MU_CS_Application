package org.example.server.controller;

import org.example.server.DAOs.WorkoutDAO;
import org.example.shared.DTOs.WorkoutDTO;
import org.json.JSONArray;
import org.json.JSONObject;

import java.sql.Date;
import java.util.List;

public class WorkoutController {
    private final WorkoutDAO workoutDAO;

    public WorkoutController() throws Exception {
        workoutDAO = new WorkoutDAO();
    }

    public String handleRequest(String jsonRequest) {
        JSONObject request = new JSONObject(jsonRequest);
        String action = request.getString("action");

        try {
            switch (action) {
                case "getAllWorkouts":
                    return getAllWorkouts();
                case "getWorkoutById":
                    return getWorkoutById(request.getInt("id"));
                case "insertWorkout":
                    return insertWorkout(request);
                case "updateWorkout":
                    return updateWorkout(request);
                case "deleteWorkout":
                    return deleteWorkout(request.getInt("workoutID"));
                case "filterByDuration":
                    return filterByDuration(request.getInt("duration"));
                default:
                    return new JSONObject().put("error", "Unknown action").toString();
            }
        } catch (Exception e) {
            return new JSONObject().put("error", e.getMessage()).toString();
        }
    }

    private String getAllWorkouts() {
        List<WorkoutDTO> workouts = workoutDAO.getAllWorkouts();
        JSONArray array = new JSONArray();
        for (WorkoutDTO dto : workouts) {
            array.put(convertWorkoutToJson(dto));
        }
        return array.toString();
    }

    private String getWorkoutById(int id) {
        WorkoutDTO dto = workoutDAO.getWorkoutById(id);
        if (dto == null) {
            return new JSONObject().put("error", "Workout not found").toString();
        }
        return convertWorkoutToJson(dto).toString();
    }

    private String insertWorkout(JSONObject request) {
        WorkoutDTO workout = new WorkoutDTO(
                0, // ID will be generated by database
                request.getInt("userID"),
                request.getString("workoutType"),
                request.getInt("duration"),
                request.getInt("caloriesBurned"),
                Date.valueOf(request.getString("workoutDate")),
                request.getString("notes")
        );
        String result = workoutDAO.insertWorkout(workout);
        return new JSONObject().put("message", result).toString();
    }

    private String updateWorkout(JSONObject request) {
        WorkoutDTO workout = new WorkoutDTO(
                request.getInt("workoutID"),
                request.getInt("userID"),
                request.getString("workoutType"),
                request.getInt("duration"),
                request.getInt("caloriesBurned"),
                Date.valueOf(request.getString("workoutDate")),
                request.getString("notes")
        );
        workoutDAO.updateWorkout(workout);
        return new JSONObject().put("success", "Workout updated successfully").toString();
    }

    private String deleteWorkout(int workoutID) {
        workoutDAO.deleteWorkout(workoutID);
        return new JSONObject().put("success", "Workout deleted successfully").toString();
    }

    private String filterByDuration(int duration) {
        List<WorkoutDTO> allWorkouts = workoutDAO.getAllWorkouts();
        List<WorkoutDTO> filteredWorkouts = workoutDAO.filterWorkoutsByDuration(allWorkouts, duration);

        JSONArray array = new JSONArray();
        for (WorkoutDTO dto : filteredWorkouts) {
            array.put(convertWorkoutToJson(dto));
        }
        return array.toString();
    }

    private JSONObject convertWorkoutToJson(WorkoutDTO dto) {
        JSONObject obj = new JSONObject();
        obj.put("workoutID", dto.getWorkoutID());
        obj.put("userID", dto.getUserID());
        obj.put("workoutType", dto.getWorkoutType());
        obj.put("duration", dto.getDuration());
        obj.put("caloriesBurned", dto.getCaloriesBurned());
        obj.put("workoutDate", dto.getWorkoutDate().toString());
        obj.put("notes", dto.getNotes());
        return obj;
    }
}